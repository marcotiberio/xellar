type TweenableProperties = Partial<{
    translate: number;
    translateX: number;
    translateY: number;
    translateZ: number;
    scale: number;
    scaleX: number;
    scaleY: number;
    scaleZ: number;
    rotate: number;
    rotateX: number;
    rotateY: number;
    rotateZ: number;
    opacity: number;
    color: string;
    backgroundColor: string;
    fontSize: number;
}>;
type ScrollTweenAction = {
    selector: string;
    trigger?: string;
    duration?: number;
    delay?: number;
    props?: TweenableProperties;
};
declare class ScrollTweenInstance {
    private _scrollPosition;
    private _isTicking;
    private _viewportHeight;
    private _actions;
    private static _nonTransformProps;
    private _transforms;
    private _opacities;
    private _colors;
    private _backgroundColors;
    private _fontSizes;
    private _topOffsets;
    private _onScroll;
    private _tick;
    private _runAction;
    private _getStyleChangesUnOptimized;
    private _getStyleChanges;
    private _getTweenState;
    private _getNonTransformProp;
    start(): void;
    refresh(): void;
    destroy(): void;
    constructor(actions: Array<ScrollTweenAction>);
}
declare class ScrollTweenRawInstance {
    private _scrollPosition;
    private _isTicking;
    private _viewportHeight;
    private _callback;
    private _elementOffsetTop;
    private _config;
    private _tweenState;
    private _onScroll;
    private _tick;
    private _getTweenStateUnoptimized;
    private _getTweenState;
    start(): void;
    refresh(): void;
    destroy(): void;
    constructor(action: Partial<ScrollTweenAction>, callback: (value: number) => void);
}
declare const define: (actions: ScrollTweenAction[]) => ScrollTweenInstance;
declare const parallel: (trigger: string, actions: ScrollTweenAction[], delay?: number) => ScrollTweenAction[];
declare const staggered: (trigger: string, stagger: number, actions: ScrollTweenAction[], delay?: number) => ScrollTweenAction[];
declare const sequence: (trigger: string, actions: ScrollTweenAction[], delay?: number) => ScrollTweenAction[];
declare const fromChildren: (parent: string, duration: number, props: Partial<{
    translate: number;
    translateX: number;
    translateY: number;
    translateZ: number;
    scale: number;
    scaleX: number;
    scaleY: number;
    scaleZ: number;
    rotate: number;
    rotateX: number;
    rotateY: number;
    rotateZ: number;
    opacity: number;
    color: string;
    backgroundColor: string;
    fontSize: number;
}> | Partial<{
    translate: number;
    translateX: number;
    translateY: number;
    translateZ: number;
    scale: number;
    scaleX: number;
    scaleY: number;
    scaleZ: number;
    rotate: number;
    rotateX: number;
    rotateY: number;
    rotateZ: number;
    opacity: number;
    color: string;
    backgroundColor: string;
    fontSize: number;
}>[]) => ScrollTweenAction[];
declare const raw: (action: Partial<ScrollTweenAction>, callback: (value: number) => void) => ScrollTweenRawInstance;
declare const ScrollTween: {
    define: (actions: ScrollTweenAction[]) => ScrollTweenInstance;
    parallel: (trigger: string, actions: ScrollTweenAction[], delay?: number) => ScrollTweenAction[];
    staggered: (trigger: string, stagger: number, actions: ScrollTweenAction[], delay?: number) => ScrollTweenAction[];
    sequence: (trigger: string, actions: ScrollTweenAction[], delay?: number) => ScrollTweenAction[];
    fromChildren: (parent: string, duration: number, props: Partial<{
        translate: number;
        translateX: number;
        translateY: number;
        translateZ: number;
        scale: number;
        scaleX: number;
        scaleY: number;
        scaleZ: number;
        rotate: number;
        rotateX: number;
        rotateY: number;
        rotateZ: number;
        opacity: number;
        color: string;
        backgroundColor: string;
        fontSize: number;
    }> | Partial<{
        translate: number;
        translateX: number;
        translateY: number;
        translateZ: number;
        scale: number;
        scaleX: number;
        scaleY: number;
        scaleZ: number;
        rotate: number;
        rotateX: number;
        rotateY: number;
        rotateZ: number;
        opacity: number;
        color: string;
        backgroundColor: string;
        fontSize: number;
    }>[]) => ScrollTweenAction[];
    raw: (action: Partial<ScrollTweenAction>, callback: (value: number) => void) => ScrollTweenRawInstance;
};
export { ScrollTween as default, define, parallel, staggered, sequence, fromChildren, raw };
